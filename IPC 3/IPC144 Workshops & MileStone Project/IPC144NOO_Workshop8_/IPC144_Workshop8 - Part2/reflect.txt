*****************************************************************************


Reflection

Workshop - #8

Full Name  : Soni Dev Alpeshbhai

Student ID#: 130759210




Authenticity Declaration:

I declare this submission is the result of my own work and has not been

shared with any other student or 3rd party content provider. This submitted

piece of work is entirely of my own creation.

*****************************************************************************




1. In the case of the - "ReportData" structure we have in total, 3 integer variables and 6 double variables. Integer values take up to 4 bytes in the memory compared to 8 bytes which is for a double variable. For an Instance,


struct ReportData

{

int skuNumb;

double prodPrice;

int calories;

double prodWeightPounds;

double prodWeightKilos;

int prodWeightGrams;

double servings;

double costPerServing;

double costCaloriesPerServing;

};


CALCULATION OF THE MEMORY (ReportData) :-

Bytes = 4*3 + 8*6

Bytes = 12 + 48

Bytes = 60

In conclusion, 'ReportData' take around 60 bytes in the memory, for the program.


We could improve the passing of information to functions by passing the data by referencing or passing the address instead of passing information by value.

For an instance, we have the function prototype for 'displayReportData' below:

void displayReportData(const struct ReportData rd, const int cheapestProductCheck);

In order to improve the efficiency of the program we should pass the parameters or the formal parameters by address. Passing an object by address is always efficient. It avoids copying all the member values, saving time and memory especially in cases where a member is actually an array with a large number of elements. Passing an object by address only copies the address, which typically occupies 4 bytes.

We can alter the function by passing addresses of the struct and the unmodifiable integer value instead of the copies of the parameters.

void displayReportData(const struct ReportData* rd, const int* cheapestProductCheck);

2. The'CatFoodInfo' and 'ReportData' structures contain some of the common members such as 'skuNumb', 'prodPrice', 'calories' and 'prodWeight'. In order to improve the 'ReportData' structure we could have used 'CatFoodInfo' structure as a member of 'ReportData' instead of the common members, which we used here. For an example:

struct CatFoodInfo {

int skuNumb;

double prodPrice;

int calories;

double prodWeight;

};

struct ReportData

{

struct CatFoodInfo cfi;

double prodWeightKilos;

double servings;

int prodWeightGrams;

double costPerServing;

double costCaloriesPerServing;

};

Due to this huge change, that we made here, we will have to change the 'printf' statement as well, that we have used in the 'displayReportData' function too.

BEFORE MODIFYING THE PROGRAM (printf) :--

printf("%07d %10.2lf %10.1lf %10.4lf %9d %8d %8.1lf %7.2lf %7.5lf", rd.skuNumber, rd.productPrice, rd.productWeightPounds, rd.productWeightKilos, rd.productWeightGrams, rd.calories, rd.servings, rd.costPerServing, rd.costCaloriesPerServing);

AFTER MODIFICATION (printf) :--

printf("%07d %10.2lf %10.1lf %10.4lf %9d %8d %8.1lf %7.2lf %7.5lf", rd.cfi.skuNumber, rd.cfi.productPrice, rd.cfi.productWeight, rd.productWeightKilos, rd.productWeightGrams, rd.cfi.calories, rd.servings, rd.costPerServing, rd.costCaloriesPerServing);

