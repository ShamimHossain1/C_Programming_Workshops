/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3
Full Name  : Shamim Hossain Srabon
Student ID#: 135646230
Email      : shsrabon@myseneca.ca
Section    : NHH

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/



1. Here are two code snippets from Milestone 1 where the string library functions can replace custom code:

1. Original Code:

// Code to calculate the length of a string
void inputCString(char *str, int minLength, int maxLength)
{
    int length;
    do
    {
        scanf(" %[^\n]", str);
        clearInputBuffer();

        // Calculate length
        length = 0;
        while (str[length] != '\0')
        {
            length++;
        }

        // Check length constraints
        if (minLength == maxLength && (length < minLength || length > maxLength))
        {
            printf("ERROR: String length must be exactly %d chars: ", minLength);
        }
        else if (length > maxLength)
        {
            printf("ERROR: String length must be no more than %d chars: ", maxLength);
        }
        else if (length < minLength)
        {
            printf("ERROR: String length must be between %d and %d chars: ", minLength, maxLength);
        }
    } while (length < minLength || length > maxLength);
}


Using String Library:

#include <string.h>

// Replacing the custom length calculation with strlen() from string.h
void inputCString(char *str, int minLength, int maxLength)
{
    do
    {
        scanf(" %[^\n]", str);
        clearInputBuffer();

        // Calculate length using strlen()
        int length = strlen(str);

        // Check length constraints
        if (minLength == maxLength && (length < minLength || length > maxLength))
        {
            printf("ERROR: String length must be exactly %d chars: ", minLength);
        }
        else if (length > maxLength)
        {
            printf("ERROR: String length must be no more than %d chars: ", maxLength);
        }
        else if (length < minLength)
        {
            printf("ERROR: String length must be between %d and %d chars: ", minLength, maxLength);
        }
    } while (strlen(str) < minLength || strlen(str) > maxLength);
}
```

Benefits of Using String Library Functions:
Simplicity: The code is made shorter and easier to read by utilizing the string library's strlen() function. The replacement of the custom loop used to calculate the string length with a single function call enhances the readability and maintainability of the code.

Efficiency: String library functions are usually efficient and well-optimized, which can result in gains in performance. In comparison to custom implementations, strlen(), a commonly used function, offers better runtime performance thanks to optimizations for quicker execution. Additionally, because library functions are well-tested and standardized across various platforms, using them can lessen the chance of errors and bugs. In general, the efficiency and quality of the code when handling string operations are improved by integrating string library functions.

2. The two string copy library functions are `strcpy` and `strncpy`. 

    1. `strcpy`: This function is used to copy a string from one location to another until it encounters a null terminator. It does not provide any limit on the number of characters to copy, which can be risky if the source string is longer than the destination buffer. Its signature is: `char *strcpy(char *dest, const char *src);`

    2. `strncpy`: This function is similar to `strcpy`, but it allows to specify the maximum number of characters to copy from the source string. This provides a safety feature, preventing buffer overflow if the source string is longer than the specified limit. Its signature is: `char *strncpy(char *dest, const char *src, size_t n);`

In C programming, `strncpy` is generally preferred over `strcpy` when dealing with potentially unsafe string copying operations where buffer overflow might occur. It's crucial for ensuring the integrity of the program's memory and preventing vulnerabilities like buffer overflows.

In the provided code blew, `strncpy` used in the `inputPhoneData` function to copy the phone number input into the `phone->number` array.

void inputPhoneData(struct Phone* phone) {
    int choice;
    char inputNumber[PHONE_LEN + 1];
    


    switch (choice)
    {

        case 1:
        case 2:
        case 3:

            printf("Number : ");
            fgets(inputNumber, sizeof(inputNumber), stdin);
            strncpy(phone->number, inputNumber, PHONE_LEN); // Using strncpy here

            printf("\n");
            break;

        default:
           
            break;
    }
}


In this code, `strncpy` is used to copy the phone number from the input buffer `inputNumber` to the `phone->number` array, limiting the copying to `PHONE_LEN` characters to prevent buffer overflow. This ensures that the destination buffer is not overflowed with characters beyond its capacity, making the operation safer.

3. I included a sorting mechanism in the `viewAllAppointments()` and `viewAppointmentSchedule()` functions to maintain the list of appointments in ascending order according to the date and time of the appointment. This is how it operates:

    1. Sorting Mechanism: I arrange the array of appointments according to their date and time before displaying them. This guarantees that the appointments are listed in the order they were made.

    2. Sorting Algorithm: To arrange the appointments in ascending order, I used a basic sorting algorithm in the `viewAllAppointments()` and `viewAppointmentSchedule()` functions. Each appointment is compared to the next by this algorithm, which switches them if they are not in the right order. Because they are straightforward and easy to use, I went with a basic sorting algorithm like bubble sort or selection sort.
 
    3. Comparing Dates and Times: To establish the order of the appointments, I compare their dates and times when organizing them. I compare the years, months, days, hours, and minutes in order of preference. By doing this, it is ensured that appointments are arranged in chronological order.

Possibilities for Improvement:

    1. Optimal Sorting Algorithm: Bubble sort and selection sort are easy to use, but they might not be the best for big datasets. Performance could be enhanced by using more effective sorting algorithms, such as quicksort or mergesort, particularly when there are a lot of appointments.

    2. Data Structures: We should think about utilizing more effective data structures like heaps or binary search trees (BSTs) in place of sorting the appointments array each time we need to display the appointments. Better time complexity for insertion and retrieval operations is provided by these data structures, which may increase overall efficiency.

    3. Caching or Memoization: We can use techniques like caching or memoization to temporarily store the sorted list of appointments if they don't change very often. By doing this, we can improve performance by avoiding having to repeatedly sort the appointments array.

    4. Error Handling: When working with user input and file operations in particular, it's critical to handle errors with grace. Enhancing the program's usability and reliability can be achieved by incorporating strong error handling mechanisms.

We can increase the effectiveness, scalability, and dependability of the appointment scheduling system by implementing these enhancements.
